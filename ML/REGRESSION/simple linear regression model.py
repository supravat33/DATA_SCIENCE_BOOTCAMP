# -*- coding: utf-8 -*-
"""
Created on Sat Oct  4 19:22:46 2025

@author: Supravata
"""
import numpy as np 	
import matplotlib.pyplot as plt
import pandas as pd	

# import the dataset
dataset = pd.read_csv(r"C:\Users\Supravata\Desktop\datascience\pdfs\excels\salary_Data.csv")

# keep only numeric columns (avoid string errors like 'Hyderabad')
dataset = dataset.select_dtypes(include=['float64', 'int64'])

# drop missing values (NaN) to avoid regression error
dataset = dataset.dropna()

# split the data to independent variable 
X = dataset.iloc[:, :-1].values

# split the data to dependent variable 
y = dataset.iloc[:, -1].values 

# as d.v is continuous that regression algorithm 
# as in the data set we have 2 attribute we use slr algo

# split the dataset to 80-20%
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# we called simple linear regression algorithm from sklearn framework 
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()

# we build simple linear regression model regressor
regressor.fit(X_train, y_train)

# test the model & create a predicted table 
y_pred = regressor.predict(X_test)

# visualize train data points (24 data)
plt.scatter(X_train, y_train, color = 'red') 
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Salary vs Experience (Training set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

# visualize test data points 
plt.scatter(X_test, y_test, color = 'red') 
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Salary vs Experience (Test set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

# slope is generated from linear regression algorithm which fit to dataset 
m = regressor.coef_
# intercept also generated by model
c = regressor.intercept_

print("Slope (m):", m)
print("Intercept (c):", c)

# predict or forecast the future data which we not trained before 
y_12 = m * 12 + c
y_20 = m * 20 + c

print("Predicted Salary for 12 years experience:", y_12)
print("Predicted Salary for 20 years experience:", y_20)

# to check overfitting (low bias high variance)
bias = regressor.score(X_train, y_train)
print("Bias (Train Score):", bias)

# to check underfitting (high bias low variance)
variance = regressor.score(X_test, y_test)
print("Variance (Test Score):", variance)

# deployment in flask & html 
# mlops (azure, google colab, heroku, kubernetes)

import pickle

# Save the trained model to disk
filename = 'linear_regression_model.pkl'

# Open a file in write-binary mode and dump the model
with open(filename, 'wb') as file:
    pickle.dump(regressor, file)

print("Model has been pickled and saved as linear_regression_model.pkl")
